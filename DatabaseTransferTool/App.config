<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <sectionGroup name="userSettings" type="System.Configuration.UserSettingsGroup, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" >
      <section name="DatabaseTransferTool.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" allowExeDefinition="MachineToLocalUser" requirePermission="false" />
    </sectionGroup>
  </configSections>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />
  </startup>
  <appSettings>

    <!-- transfer configuration settings -->
    
    <!-- 
	  Set this value if you want to have the source connection string persist across application launches.
	  The connection string will be automatically optimized.
	  Example: Server=tcp:<ip address>,1433;Database=<database>;User ID=<user id>;Password=<password>;
	  This setting is also saved and reloaded between application runs if it is not specified here.
	  -->
    <add key="SourceConnectionString" value=""/>

    <!--
	  Set this value if you want to have the desination connection string persist across application launches.
	  The connection string will be automatically optimized. This setting is also saved and reloaded between 
	  application runs if it is not specified here.
	  -->
    <add key="DestinationConnectionString" value=""/>

    <!--
	  Change this path to point to the directory in which you want the log files to be written. The directory
	  and parent directories you specify will be automatically created if they do not already exist.
	  -->
    <add key="LogPath" value="C:\Database Transfer\"/>

    <!--
	  Change this value to the date before which you want to include data (exclusive). When the transfer mode
	  is set to "Older Than", this date will be used as the cutoff date. It will be ignored otherwise. The
	  date value can be any date string that is valid in SQL Server.
	  Example:
	  <add key="BeforeDate" value=""/>
	  -->
    <add key="BeforeDate" value=""/>

    <!--
	  Change this value to the date after which you want to include data (inclusive). When the transfer mode
	  is set to "Newer Than", this date will be used as the cutoff date. It will be ignored otherwise. The
	  date value can be any date string that is valid in SQL Server.
	  Example:
	  <add key="AfterDate" value="9-1-13"/>
	  -->
    <add key="AfterDate" value=""/>

    <!--
	  This value determines the size of the thread pool used in querying and insertion. Both querying and
	  insertion happen inline, so they use the same thread pool. An optimal setting seems to be ~6 times
	  the number of cores on your machine, depending on the batch size. This allows querying for batch data
	  to occur while inserting of the previous batches occurs. You should experiment with this value and
	  find your own optimal setting before you perform your final transfer. This value should be set just 
	  below the size with which connection failures, severed connections, and other failures occur.
	  -->
    <add key="ThreadPoolSize" value="12"/>

    <!--
	  This value determines the size in MB of the batches used in querying and insertion. This value should
	  be proportional to your thread pool size to stay within a reasonable resource usage limit on the source
	  and destination databases. You should experiment with this value and find your own optimal setting 
	  before you perform your final transfer. This value should be set just below the size with which connection
	  failures, severed connections, and other failures occur.
	  -->
    <add key="BatchSizeMB" value="15"/>

    <!-- 
    Table configuration settings.
    
    To add a custom filter to a table that persists across application runs, add an entry for each table
    with a key of the fully qualified table name and the value of the filter. i.e.
    
    <add key="dbo.MyTable" value="Timestamp >= '9-1-13'" />
    -->

    <!-- 
	  To exclude tables from all transfers, add them as comma separated values to the ExcludedTables setting.
	  Example:
	  <add key="ExcludedTables" value="dbo.MyTable,dbo.MyOtherTable"/>
	  -->

    <!--
	  Since incremental transfers require corallary filters for each table previously filtered, it may make
	  sense to create one section of table filters for the initial transfer and one section for the final,
	  commenting one or the other out before the runs as appropriate.
    
    To add a custom column mapping for a table, add an entry for each column mapping in the below form:
    
    <add key="Custom_Mappings:fullyQualified.tableName.newColumnName" value="oldColumnName" />
    -->

    <!--
    This tool supports the usage of virtual select columns. Virtual select columns are columns which do
    not exist in the source database but exist in the destination database and can be populated by additional
    queries in the source database. To add a virtual select column for a table, add an entry in the below form,
    where the name of the virtual select column matches the name of the column it will populate in the destination
    database. You might wish to turn on query logging when you first add virtual select columns to make sure the
    syntax is correct within the context of the larger query.
    
    <add key="Virtual_Selects:fullyQualified.tableName.virtualSelectColumnName" value="select someData from otherTables" />    
    -->

    <!--
    Some tables in the destination database will not directly map to source tables. For these tables, virtual columns can be used
    in conjunction with a mapping to the source table most of the data will come from. To add a table mapping, add an entry in
    the below form:
    
    <add key="Table_Mapping:fullyQualified.newTableName" value="fullyQualified.sourceTableName" />
    or
    <add key="Table_Mapping_Distinct:fullyQualified.newTableName" value="fullyQualified.sourceTableName" />
    if you require the select queries against the source database to use the "distinct" keyword
    -->

 

  </appSettings>
  <!-- remember which connection strings were used from the last run if no connection strings are specified above -->
  <userSettings>
    <DatabaseTransferTool.Properties.Settings>
      <setting name="SourceConnectionStringText" serializeAs="String">
        <value />
      </setting>
      <setting name="DestinationConnectionStringText" serializeAs="String">
        <value />
      </setting>
    </DatabaseTransferTool.Properties.Settings>
  </userSettings>
</configuration>